#!/bin/bash

prefix=234
name=lustre-demo
pool=$PWD/pool


setup-network() {
  echo "Setup network $name-$prefix"

cat > libvirt/network-$prefix.xml << EOF
<network>
  <name>$name-$prefix</name>
  <forward mode='nat'>
    <nat>
      <port start='1024' end='65535'/>
    </nat>
  </forward>
  <bridge name='virbr$prefix' stp='on' delay='0'/>
  <domain name='local' localOnly='yes'/>
  <ip address='192.168.$prefix.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.$prefix.2' end='192.168.$prefix.254'/>
      <host mac='52:54:00:a7:29:6c' name='$name-mds0' ip='192.168.$prefix.10'/>
      <host mac='52:54:00:e5:b1:6a' name='$name-mds1' ip='192.168.$prefix.11'/>
      <host mac='52:54:00:0e:8d:29' name='$name-oss0' ip='192.168.$prefix.20'/>
      <host mac='52:54:00:85:f0:ae' name='$name-oss1' ip='192.168.$prefix.21'/>
      <host mac='52:54:00:f9:c2:18' name='$name-client' ip='192.168.$prefix.2'/>
    </dhcp>
  </ip>
</network>
EOF
  virsh --quiet net-define libvirt/network-$prefix.xml
}

setup-guest() {
  while read mac guest ip; do
    echo "Setup $guest $ip $mac"
    mac=$mac network=$name-$prefix name=$guest memory=8096 ./libvirt/lustre-demo-guest.template > libvirt/$guest.xml
    virsh --quiet define libvirt/$guest.xml
    [ -f $pool/$guest.qcow2 ] || ( cd $pool && qemu-img create -q -f qcow2 -F qcow2 -b lustre-demo-orig.qcow2 $guest.qcow2 )
    virsh --quiet attach-disk $guest $pool/$guest.qcow2 --persistent --type disk --target vda --driver qemu --subdriver qcow2
  done << EOF
52:54:00:a7:29:6c $name-mds0 192.168.$prefix.10
52:54:00:e5:b1:6a $name-mds1 192.168.$prefix.11
52:54:00:0e:8d:29 $name-oss0 192.168.$prefix.20
52:54:00:85:f0:ae $name-oss1 192.168.$prefix.21
52:54:00:f9:c2:18 $name-client 192.168.$prefix.2
EOF
}


download-image() {
  orig=lustre-demo-orig.qcow2
  if [ -f $pool/$orig ] && [ $(stat -c %s $pool/$orig) = 2098331648 ]; then
    echo "Demo VM $orig already downloaded"
  else
    echo "Downloading lustre-demo Almalinux 8 Linux image..."
    ( cd $pool && wget --continue https://www.cs.helsinki.fi/u/jjaakkol/lustre-demo-orig.qcow2 ) || exit 1
  fi
}


create() {
  download-image
  setup-network
  setup-guest
}


stop() {
  for guest in client mds0 mds1 oss0 oss1; do
    virsh --quiet destroy $name-$guest
  done
  virsh --quiet net-destroy $name-$prefix
  echo "VMs and networks stopped"
}     

destroy() {
  for guest in client mds0 mds1 oss0 oss1; do
    virsh --quiet undefine $name-$guest --nvram
    rm -vf $pool/$name-$guest.qcow2
  done
  virsh --quiet net-undefine $name-$prefix
  echo "VMs and networks destroyed"
}     

start() {
  echo "Starting network $name-$prefix"
  virsh --quiet net-start $name-$prefix
  echo "Starting guests" 
  for guest in client mds0 mds1 oss0 oss1; do
    virsh --quiet start $name-$guest
  done

  # Configure guests
  while read ip name; do
    echo "Waiting for $name at $ip to come up"
    while ! ping -c 1 -W 1 $ip  > /dev/null; do
      echo -n "."
    done
    sleep 1
    ssh -i ./id_rsa root@$ip "echo Configuring $ip; cd /root/lustre-demo && { git pull -q && ./configure-guest.sh $name ;}" < /dev/null
  done << EOF
192.168.$prefix.2 lustre-demo-client
192.168.$prefix.10 lustre-demo-mds0
192.168.$prefix.11 lustre-demo-mds1
192.168.$prefix.20 lustre-demo-oss0
192.168.$prefix.21 lustre-demo-oss1
EOF
}

while true; do case $1 in
--name)
        name="$2"
        shift; shift
        ;;
--subnet)
        prefix="$2"
        shift; shift
        ;;
--pool)
        pool="$2"
        shift; shift;
        ;;
-*)
        echo "$0: Don't know option $1"
        exit 1
        ;;
*)
        break
        ;;
esac; done

case $1 in
start)
        start
        ;;
stop)
        stop
        ;;
create)
        create
        ;;
destroy)
        destroy
        ;;
status)
        virsh list
        virsh net-dhcp-leases $name-$prefix
        ;;
*)
        cat << EOF
Usage:
$0 start
$0 stop
$0 create
$0 destroy

Options:
  --subnet select the network subnet
            defaut: $prefix
  --pool   select the pooldir path 
            default: $pool
  --name   select the prefix name of create VMs, networks and disk images
            default: $name

EOF
esac


